<?xml version="1.0" encoding="UTF-8"?>
<!--
	A Project Object Model or POM is the fundamental unit of work in Maven.
	It is an XML file that contains information about the project and configuration details used by Maven to build the project.
-->

<!-- The "project" root is required. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- Should be set to 4.0.0 to match the minimum requirements. -->
	<modelVersion>4.0.0</modelVersion>

	<!-- The ID of the project's group. -->
	<groupId>groupId</groupId>
	<!-- The ID of the artifact (project). -->
<!--
	An artifact is one of many kinds of tangible by-products produced during the development of software.
	Some artifacts (use cases, class diagrams, Unified Modeling Language (UML) models, requirements design documents, ...) help describe the function, architecture, and design of software.
	Other artifacts are concerned with the process of development itselfâ€”such as project plans, business cases, and risk assessments.

	Build tools often refer to source code compiled for testing as an artifact, because the executable is necessary to carrying out the testing plan.
	Without the executable to test, the testing plan artifact is limited to non-execution based testing.
-->
	<artifactId>basic_struts</artifactId>
	<!-- The version of the artifact under the specified group. -->
	<version>1.0-SNAPSHOT</version>
	<!-- A POM requires that its groupId, artifactId, and version be configured. These 3 values form the project's fully qualified artifact name, in the form of <groupId>:<artifactId>:<version>. -->

<!--
	Any field of the model that is a single value element can be referenced as a variable.
	You are also able to reference any properties defined in the project as a variable.
-->
	<properties>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<struts2.version>2.5.26</struts2.version>
		<log4j2.version>2.14.1</log4j2.version>
	</properties>

<!--
	The cornerstone of the POM is its dependency list. Most projects depend on others to build and run correctly.
	Maven downloads and links the dependencies on compilation, as well as on other goals that require them.
	As an added bonus, Maven brings in the dependencies of those dependencies (transitive dependencies), allowing your list to focus solely on the dependencies your project requires.
-->
	<dependencies>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-core</artifactId>
			<version>${struts2.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j2.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j2.version}</version>
		</dependency>
	</dependencies>

	<build>
<!--
	This is the name of the bundled project when it is finally built (sans the file extension, for example: my-project-1.0.jar). It defaults to ${artifactId}-${version}.
	The term "finalName" is kind of a misnomer, however, as plugins that build the bundled project have every right to ignore/modify this name (but they usually do not).
-->
		<finalName>basic-struts</finalName>
		<plugins>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.4.22.v20191022</version>
<!--
	This is specific to the individual plugin.
	Without going too in depth into the mechanics of how plugins work, suffice it to say that whatever properties that the plugin Mojo may expect (these are getters and setters in the Java Mojo bean) can be specified here.
	It may be good to note that all configuration elements, wherever they are within the POM, are intended to pass values to another underlying system, such as a plugin.
	In other words: values within a configuration element are never explicitly required by the POM schema, but a plugin goal has every right to require configuration values.
-->
				<configuration>
					<webApp>
						<contextPath>/${build.finalName}</contextPath>
					</webApp>
					<stopKey>CTRL+C</stopKey>
					<stopPort>8999</stopPort>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<scanTargets>
						<scanTarget>src/main/webapp/WEB-INF/web.xml</scanTarget>
					</scanTargets>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>